@model IEnumerable<TFMS.Models.Vehicle>

@{
    ViewData["Title"] = "Vehicles";
}

<div class="container content-container mt-4">
    @* Added content-container and mt-4 for top margin *@

    <h1>Vehicles</h1>

    <p>
        <a asp-action="Create" class="btn btn-accent">Add New Vehicle</a> @* Changed to btn-primary for consistency with images *@
    </p>

    @* --- Search and Filter Section --- *@
        <form asp-controller="Vehicles" asp-action="Index" method="get" class="mb-4">
            <div class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label for="SearchString" class="form-label">Search (Reg No, Make, Model)</label>
                    <input type="text" name="searchString" id="SearchString" class="form-control" value="@ViewBag.CurrentSearchString" />
                </div>
                <div class="col-md-3">
                    <label for="StatusFilter" class="form-label">Filter by Status</label>
                    <select name="statusFilter" id="StatusFilter" class="form-select" asp-items="ViewBag.StatusFilter">
                        <option value="">-- Select Status --</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="FuelTypeFilter" class="form-label">Filter by Fuel Type</label>
                    <select name="fuelTypeFilter" id="FuelTypeFilter" class="form-select" asp-items="ViewBag.FuelTypeFilter">
                        <option value="">-- Select Fuel Type --</option>
                    </select>
                </div>
                <div class="col-md-2 d-flex justify-content-end">
                    <button type="submit" class="btn btn-outline-secondary">Apply Filters</button>
                    <a asp-action="Index" class="btn btn-outline-danger ms-2">Clear Filters</a>
                </div>
            </div>
        </form>
        @* --- End Search and Filter Section --- *@

        <table class="table table-hover" id="vehiclesTable">
            @* Added id="vehiclesTable" and table-hover *@
            <thead>
                <tr>
                    <th data-sort-column="RegistrationNumber" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.RegistrationNumber) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="Capacity" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.Capacity) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="Status" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.Status) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="LastServicedDate" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.LastServicedDate) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="Make" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.Make) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="Model" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.Model) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="ManufacturingYear" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.ManufacturingYear) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="FuelType" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.FuelType) <span class="sort-icon"></span>
                    </th>
                    <th data-sort-column="CurrentOdometerKm" class="cursor-pointer">
                        @Html.DisplayNameFor(model => model.CurrentOdometerKm) <span class="sort-icon"></span>
                    </th>
                    <th></th> @* Actions column - not sortable *@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.RegistrationNumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Capacity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Status)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LastServicedDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Make)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Model)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ManufacturingYear)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FuelType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CurrentOdometerKm)
                        </td>
                        <td>

                            <div class="d-flex flex-nowrap justify-content-end">
                                @* Using d-flex and flex-nowrap for horizontal alignment without wrapping and right-aligning *@
                                <a asp-action="Edit" asp-route-id="@item.VehicleId" class="btn btn-sm btn-primary me-1"><i class="bi bi-pencil-square"></i> Edit</a> @* Changed to btn-primary and added icon*@
                                <a asp-action="Details" asp-route-id="@item.VehicleId" class="btn btn-sm btn-info me-1"><i class="bi bi-info-circle"></i> Details</a> @* Changed to btn-info and added icon*@
                                <a asp-action="Delete" asp-route-id="@item.VehicleId" class="btn btn-sm btn-danger"><i class="bi bi-trash"></i> Delete</a> @* Added icon*@
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

</div> @* Close the content-container div here *@

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <style>
        /* --- TABLE HEADER STYLES (Applied to all tables with class "table") --- */
        .table thead th {
            background-color: var(--primary) !important; /* Use primary blue variable for consistency */
            color: var(--text-light) !important; /* White text */
            border-color: var(--primary) !important; /* Blue border */
            white-space: normal; /* Allow header text to wrap */
            padding: 0.75rem; /* Standard Bootstrap padding, adjust if needed */
            text-align: left; /* Align text to the left */
            vertical-align: middle; /* Vertically align text in the middle */
        }
        /* --- END TABLE HEADER STYLES --- */

        /* --- ZEBRA STRIPING CSS --- */
        #vehiclesTable tbody tr:nth-child(odd) {
            background-color: #f8f9fa !important; /* Light grey */
        }

        #vehiclesTable tbody tr:nth-child(even) {
            background-color: #ffffff; /* White */
        }
        /* --- END OF ZEBRA STRIPING CSS --- */

        /* Styles for table cells to ensure wrapping and vertical alignment */
        #vehiclesTable td {
            white-space: normal; /* Allow cell content to wrap */
            word-wrap: break-word;
            overflow-wrap: break-word;
            vertical-align: middle; /* Vertically align cell content in the middle */
            padding: 0.5rem; /* Standard Bootstrap cell padding */
        }

            /* Specific styling for the actions column to keep buttons/links on one line */
            #vehiclesTable td:last-child { /* Targets the last td in each row (actions column) */
                white-space: nowrap; /* Prevent buttons/links from wrapping */
                text-align: right; /* Align buttons/links to the right */
            }

        /* Sorting icon styles */
        .cursor-pointer {
            cursor: pointer;
        }

        .sort-icon {
            margin-left: 5px;
            display: inline-block; /* Ensure it respects margin-left */
            min-width: 10px; /* Give it some space even when empty */
        }

        .sort-asc::after {
            content: "\25B2"; /* Up arrow */
        }

        .sort-desc::after {
            content: "\25BC"; /* Down arrow */
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('vehiclesTable');
            if (!table) return;

            const headers = table.querySelectorAll('th[data-sort-column]');
            const tbody = table.querySelector('tbody');
            if (!tbody) return;

            let currentSortColumn = null;
            let currentSortDirection = 'asc';

            // Initial sort state from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const initialSortColumn = urlParams.get('sortColumn');
            const initialSortDirection = urlParams.get('sortOrder');

            if (initialSortColumn) {
                currentSortColumn = initialSortColumn;
                currentSortDirection = initialSortDirection === 'desc' ? 'desc' : 'asc';
                const initialHeader = table.querySelector(`th[data-sort-column="${currentSortColumn}"]`);
                if (initialHeader) {
                    initialHeader.classList.add(`sort-${currentSortDirection}`);
                }
            }


            headers.forEach(header => {
                header.addEventListener('click', function () {
                    const column = this.dataset.sortColumn;

                    if (currentSortColumn === column) {
                        currentSortDirection = (currentSortDirection === 'asc' ? 'desc' : 'asc');
                    } else {
                        currentSortDirection = 'asc'; // Reset direction if new column is clicked
                    }
                    currentSortColumn = column;

                    // Remove existing sort icons and classes from all headers
                    headers.forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                    });

                    // Add new sort icon class to the clicked header
                    if (currentSortDirection === 'asc') {
                        this.classList.add('sort-asc');
                    } else {
                        this.classList.add('sort-desc');
                    }

                    // For client-side sorting, pass the column and direction
                    sortTable(column, currentSortDirection);

                    // For server-side sorting (if applicable), update URL and reload
                    // This part is commented out because your current script does client-side sorting.
                    // If you want server-side, you'd replace sortTable() call with something like:
                    // const newUrl = new URL(window.location.href);
                    // newUrl.searchParams.set('sortColumn', column);
                    // newUrl.searchParams.set('sortOrder', currentSortDirection);
                    // window.location.href = newUrl.toString();
                });
            });

            function sortTable(columnName, direction) {
                const rows = Array.from(tbody.querySelectorAll('tr'));

                rows.sort((a, b) => {
                    const headerIndex = Array.from(headers).findIndex(h => h.dataset.sortColumn === columnName);
                    if (headerIndex === -1) return 0;

                    const cellA = a.children[headerIndex];
                    const cellB = b.children[headerIndex];

                    if (!cellA || !cellB) return 0;

                    const valA = cellA.textContent.trim();
                    const valB = cellB.textContent.trim();

                    let comparison = 0;

                    // Try to convert to number for numeric columns
                    const numA = parseFloat(valA);
                    const numB = parseFloat(valB);

                    if (!isNaN(numA) && !isNaN(numB)) {
                        comparison = numA - numB;
                    }
                    // Try to convert to date for date columns (using multiple common formats)
                    else if (moment && (moment(valA, ['YYYY-MM-DD', 'MMM DD,YYYY', 'MM/DD/YYYY'], true).isValid() && moment(valB, ['YYYY-MM-DD', 'MMM DD,YYYY', 'MM/DD/YYYY'], true).isValid())) {
                        const dateA = moment(valA, ['YYYY-MM-DD', 'MMM DD,YYYY', 'MM/DD/YYYY'], true).valueOf();
                        const dateB = moment(valB, ['YYYY-MM-DD', 'MMM DD,YYYY', 'MM/DD/YYYY'], true).valueOf();
                        comparison = dateA - dateB;
                    }
                    // Otherwise, compare as strings (case-insensitive)
                    else {
                        comparison = valA.localeCompare(valB, undefined, { sensitivity: 'base' });
                    }

                    return direction === 'asc' ? comparison : -comparison;
                });

                // Re-append sorted rows to the tbodya
                rows.forEach(row => tbody.appendChild(row));
            }
        });
    </script>
}