@model TFMS.ViewModels.DashboardSummaryViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<h1 class="mb-4">Fleet Dashboard</h1>

@* Displaying success/error messages (from TempData) *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Vehicle Overview</h5>
            </div>
            <div class="card-body">
                <p><strong>Total Vehicles:</strong> @Model.TotalVehicles</p>
                <p><strong>Available Vehicles:</strong> <span class="text-success">@Model.AvailableVehicles</span></p>
                <p><strong>In Maintenance:</strong> <span class="text-warning">@Model.InMaintenanceVehicles</span></p>
                <p><strong>Unavailable:</strong> <span class="text-danger">@Model.UnavailableVehicles</span></p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Trip Overview</h5>
            </div>
            <div class="card-body">
                <p><strong>Total Trips:</strong> @Model.TotalTrips</p>
                <p><strong>Completed Trips:</strong> <span class="text-success">@Model.CompletedTrips</span></p>
                <p><strong>In Progress:</strong> <span class="text-info">@Model.InProgressTrips</span></p>
                <p><strong>Pending:</strong> <span class="text-warning">@Model.PendingTrips</span></p>
                <p><strong>Cancelled:</strong> <span class="text-danger">@Model.CancelledTrips</span></p>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Fuel Consumption Summary</h5>
            </div>
            <div class="card-body">
                <p><strong>Total Fuel Cost (Last 30 Days):</strong> <span class="fw-bold">@Model.TotalFuelCostLast30Days.ToString("C")</span></p>
                <h6 class="mt-3">Daily Fuel Consumption (Last 7 Days)</h6>
                @if (Model.DailyFuelConsumptionLast7Days != null && Model.DailyFuelConsumptionLast7Days.Any())
                {
                    <canvas id="fuelConsumptionChart"></canvas>
                }
                else
                {
                    <p class="text-muted">No fuel consumption data available for the last 7 days.</p>
                }
            </div>
        </div>
    </div>
</div>

@* Reports Section - As added in previous steps *@
<div class="row mt-4">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Reports</h5>
                <p class="card-text">Generate detailed performance reports for your fleet.</p>
                <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                    <a asp-controller="Reports" asp-action="PerformanceReportPdf" class="btn btn-info me-md-2">
                        <i class="bi bi-file-earmark-pdf me-2"></i> Generate Fleet Performance (PDF)
                    </a>
                    
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Chart for Daily Fuel Consumption
            var fuelData = @Html.Raw(Json.Serialize(Model.DailyFuelConsumptionLast7Days));

            if (fuelData && fuelData.length > 0) {
                var dates = fuelData.map(item => new Date(item.date).toLocaleDateString());
                var amounts = fuelData.map(item => item.amount);

                var ctxFuel = document.getElementById('fuelConsumptionChart').getContext('2d');
                new Chart(ctxFuel, {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            label: 'Fuel Consumption (Liters)',
                            data: amounts,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            tension: 0.1,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Fuel Liters'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return context.dataset.label + ': ' + context.parsed.y.toFixed(2) + ' L';
                                    }
                                }
                            }
                        }
                    }
                });
            }
        });
    </script>
}
