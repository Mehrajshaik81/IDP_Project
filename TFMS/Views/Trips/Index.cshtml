@model IEnumerable<TFMS.Models.Trip>
@using TFMS.Data
@using System.Security.Claims;

@{
    ViewData["Title"] = "Trips";
}


<div class="container content-container mt-4">
    <h1 class="text-primary">Trips</h1>

    <p>
        @if (User.IsInRole("Fleet Administrator") || User.IsInRole("Fleet Operator"))
        {
            <a asp-action="Create" class="btn btn-md btn-outline-details-custom">Create New Trip</a>
        }
    </p>
    <form asp-action="Index" method="get" class="mb-4">
        <div class="row g-3 align-items-end">
            <div class="col-md-4 col-lg-3">
                <label for="searchString" class="form-label">Search (Location, Vehicle, Driver):</label>
                <input type="text" name="searchString" class="form-control" value="@ViewBag.CurrentSearchString"/>
            </div>
            <div class="col-md-4 col-lg-2">
                <label for="statusFilter" class="form-label">Status:</label>
                <select name="statusFilter" class="form-select" asp-items="ViewBag.StatusFilter"></select>
            </div>
            <div class="col-md-4 col-lg-2">
                <label for="vehicleIdFilter" class="form-label">Vehicle:</label>
                <select name="vehicleIdFilter" class="form-select" asp-items="ViewBag.VehicleFilter"></select>
            </div>

            @* Conditional rendering for Driver Filter: Only show if not a Driver role *@
            @if (!User.IsInRole("Driver"))
            {
                <div class="col-md-4 col-lg-2">
                    <label for="driverIdFilter" class="form-label">Driver:</label>
                    <select name="driverIdFilter" class="form-select" asp-items="ViewBag.DriverFilter"></select>
                </div>
            }
            else
            {
                @* Hidden field to ensure driverIdFilter is always sent, even if the dropdown is hidden/disabled *@
                <input type="hidden" name="driverIdFilter" value="@ViewBag.CurrentDriverFilter" />
            }

            <div class="col-md-2 d-flex align-items-end justify-content-end">
                <button type="submit" class="btn btn-md btn-outline-secondary me-2">Apply Filters</button>
                <a asp-action="Index" class="btn btn-md btn-outline-danger">Clear Filters</a>
            </div>
        </div>
    </form>

    <table class="table table-hover table-striped" id="tripsTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Vehicle)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Driver)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StartLocation)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EndLocation)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScheduledStartTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EstimatedDistanceKm)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Vehicle!.RegistrationNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Driver!.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StartLocation)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EndLocation)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ScheduledStartTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EstimatedDistanceKm)
                    </td>
                    <td>
                        <div class="d-flex flex-row justify-content-start flex-nowrap">
                            <a asp-action="Edit" asp-route-id="@item.TripId" class="btn btn-action-small btn-outline-primary-custom me-1" title="Edit">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <a asp-action="Details" asp-route-id="@item.TripId" class="btn btn-sm btn-outline-details-custom" title="Details">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.TripId" class="btn btn-action-small btn-outline-danger-custom me-1" title="Delete">
                                <i class="bi bi-trash"></i> Delete
                            </a>
                            @if (User.IsInRole("Fleet Administrator") || User.IsInRole("Fleet Operator") || (User.IsInRole("Driver") && item.DriverId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value))
                            {
                                <a asp-action="UpdateStatus" asp-route-id="@item.TripId" class="btn btn-sm btn-success statusButton" title="Update Status">
                                    <i class="bi bi-arrow-repeat"></i> Status
                                </a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
@* Bootstrap Icons CSS Link - This usually goes in _Layout.cshtml or directly in the <head> section globally if you want icons everywhere without adding to each page.
           If it's already in _Layout.cshtml, you don't need it here. If not, consider moving it there.
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
        *@

    <style>
        /* Table Header Color (your existing rule, slightly adjusted for consistency) */
        .table thead th {
            background-color: var(--primary) !important; /* Use primary blue variable for consistency */
            color: var(--text-light) !important; /* White text */
            border-color: var(--primary) !important; /* Blue border */
            white-space: normal; /* This can be 'nowrap' if you want to prevent header text wrapping */
            padding: 0.75rem;
            text-align: center;
            vertical-align: middle;
        }

        /* --- ZEBRA STRIPING CSS --- */
        #tripsTable tbody tr:nth-child(odd) {
            background-color: #f8f9fa !important; /* Light grey */
        }

        #tripsTable tbody tr:nth-child(even) {
            background-color: #ffffff; /* White */
        }
        /* --- END OF ZEBRA STRIPING CSS --- */

        .table tbody tr {
            text-align: center;
        }

        /* Styles for table cells to ensure wrapping and vertical alignment */
        #tripsTable td {
            white-space: normal; /* Allow cell content to wrap */
            word-wrap: break-word;
            overflow-wrap: break-word;
            vertical-align: middle; /* Vertically align cell content in the middle */
            padding: 0.5rem; /* Standard Bootstrap cell padding */
        }

            /* Specific styling for the actions column to keep buttons/links on one line */
            #tripsTable td:last-child { /* Targets the last td in each row (actions column) */
                white-space: nowrap; /* Prevent buttons/links from wrapping */
                text-align: right; /* Align buttons/links to the right */
            }

        /* Adjust button margins for better spacing */
        .btn-sm + .btn-sm {
            /* margin-left: 0.25rem; /* Small margin between consecutive small buttons */ */
        }

        .btn-outline-primary-custom {
            color: var(--primary);
            border: 1px solid var(--primary);
            background-color: transparent;
        }

            .btn-outline-primary-custom:hover {
                background-color: var(--primary);
                color: var(--text-light);
            }


        .btn-accent {
            background-color: var(--accent);
            color: var(--text-light);
            border-radius: 8px;
            padding: 0.6rem 1.5rem;
            font-weight: 600;
            transition: all 0.2s;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

            .btn-accent:hover {
                background-color: var(--button-hover);
                color: var(--text-light);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }

        .btn-secondary-outline {
            background-color: transparent;
            color: var(--primary);
            border: 1px solid var(--primary);
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-weight: 600;
            transition: all 0.2s;
        }

            .btn-secondary-outline:hover {
                background-color: var(--primary);
                color: var(--text-light);
            }

        .btn-action-small {
            padding: 0.3rem 0.5rem;
            border-radius: 5px;
            font-size: 0.85rem;
            margin-left: 0.15rem;
            transition: all 0.2s;
            white-space: nowrap;
        }

        .btn-outline-primary-custom {
            color: var(--primary);
            border: 1px solid var(--primary);
            background-color: transparent;
        }

            .btn-outline-primary-custom:hover {
                background-color: var(--primary);
                color: var(--text-light);
            }

        .btn-outline-info-custom {
            color: var(--accent);
            border: 1px solid var(--accent);
            background-color: transparent;
        }

            .btn-outline-info-custom:hover {
                background-color: var(--accent);
                color: var(--text-light);
            }

        .statusButton {
            color: #154734;
            border: 1px solid #154734;
            background-color: transparent;
        }

        .statusButtons {
            background-color: #5cb85c;
                color: var(--text-light);
            }

        .btn-outline-danger-custom {
            color: #dc3545;
            border: 1px solid #dc3545;
            background-color: transparent;
        }

            .btn-outline-danger-custom:hover {
                background-color: #dc3545;
                color: var(--text-light);
            }
    </style>
}